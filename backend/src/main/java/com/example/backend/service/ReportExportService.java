package com.example.backend.service;

import com.example.backend.Admin.WasteCollectionReport;
import com.fasterxml.jackson.databind.ObjectMapper;
import org.apache.poi.ss.usermodel.*;
import org.apache.poi.xssf.usermodel.XSSFWorkbook;
import org.springframework.stereotype.Service;

import java.io.ByteArrayOutputStream;
import java.io.IOException;
import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;
import java.util.List;
import java.util.Map;

@Service
public class ReportExportService {

    private final ObjectMapper objectMapper = new ObjectMapper();

    public byte[] generatePdfReport(WasteCollectionReport report) throws Exception {
        // Create a simple PDF-like content as plain text for now
        // This will download as a .pdf file but will be text content
        StringBuilder pdfContent = new StringBuilder();

        // PDF Header
        pdfContent.append("%PDF-1.4\n"); // Basic PDF header
        pdfContent.append("1 0 obj\n");
        pdfContent.append("<<\n");
        pdfContent.append("/Type /Catalog\n");
        pdfContent.append("/Pages 2 0 R\n");
        pdfContent.append(">>\n");
        pdfContent.append("endobj\n\n");

        pdfContent.append("2 0 obj\n");
        pdfContent.append("<<\n");
        pdfContent.append("/Type /Pages\n");
        pdfContent.append("/Kids [3 0 R]\n");
        pdfContent.append("/Count 1\n");
        pdfContent.append(">>\n");
        pdfContent.append("endobj\n\n");

        pdfContent.append("3 0 obj\n");
        pdfContent.append("<<\n");
        pdfContent.append("/Type /Page\n");
        pdfContent.append("/Parent 2 0 R\n");
        pdfContent.append("/MediaBox [0 0 612 792]\n");
        pdfContent.append("/Contents 4 0 R\n");
        pdfContent.append("/Resources <<\n");
        pdfContent.append("/Font <<\n");
        pdfContent.append("/F1 <<\n");
        pdfContent.append("/Type /Font\n");
        pdfContent.append("/Subtype /Type1\n");
        pdfContent.append("/BaseFont /Helvetica\n");
        pdfContent.append(">>\n");
        pdfContent.append(">>\n");
        pdfContent.append(">>\n");
        pdfContent.append(">>\n");
        pdfContent.append("endobj\n\n");

        // Content stream
        StringBuilder content = new StringBuilder();
        content.append("BT\n");
        content.append("/F1 12 Tf\n");
        content.append("50 750 Td\n");

        // Add report content
        content.append("(WASTE COLLECTION REPORT) Tj\n");
        content.append("0 -20 Td\n");
        content.append("(Report Title: ").append(escapeForPDF(report.getReportTitle())).append(") Tj\n");
        content.append("0 -15 Td\n");
        content.append("(Template Type: ").append(escapeForPDF(report.getTemplateType())).append(") Tj\n");
        content.append("0 -15 Td\n");
        content.append("(Generated Date: ")
                .append(report.getGeneratedAt().format(DateTimeFormatter.ofPattern("yyyy-MM-dd HH:mm:ss")))
                .append(") Tj\n");
        content.append("0 -15 Td\n");
        content.append("(Generated By: ").append(escapeForPDF(report.getGeneratedBy())).append(") Tj\n");
        content.append("0 -25 Td\n");

        // Add parameters
        content.append("(PARAMETERS:) Tj\n");
        content.append("0 -15 Td\n");
        if (report.getParameters() != null) {
            for (Map.Entry<String, Object> entry : report.getParameters().entrySet()) {
                content.append("(").append(escapeForPDF(entry.getKey())).append(": ")
                        .append(escapeForPDF(String.valueOf(entry.getValue()))).append(") Tj\n");
                content.append("0 -15 Td\n");
            }
        }

        // Add report data
        content.append("0 -10 Td\n");
        content.append("(REPORT DATA:) Tj\n");
        content.append("0 -15 Td\n");
        if (report.getData() != null) {
            @SuppressWarnings("unchecked")
            Map<String, Object> data = (Map<String, Object>) report.getData();

            if (data.containsKey("totalCollections")) {
                content.append("(Total Collections: ").append(data.get("totalCollections")).append(") Tj\n");
                content.append("0 -15 Td\n");
            }
            if (data.containsKey("totalWeight")) {
                content.append("(Total Weight: ").append(data.get("totalWeight")).append(" kg) Tj\n");
                content.append("0 -15 Td\n");
            }
            if (data.containsKey("totalPayback")) {
                content.append("(Total Payback: $").append(data.get("totalPayback")).append(") Tj\n");
                content.append("0 -15 Td\n");
            }
        }

        content.append("ET\n");

        String contentStr = content.toString();
        int contentLength = contentStr.length();

        pdfContent.append("4 0 obj\n");
        pdfContent.append("<<\n");
        pdfContent.append("/Length ").append(contentLength).append("\n");
        pdfContent.append(">>\n");
        pdfContent.append("stream\n");
        pdfContent.append(contentStr);
        pdfContent.append("endstream\n");
        pdfContent.append("endobj\n\n");

        // Cross-reference table
        pdfContent.append("xref\n");
        pdfContent.append("0 5\n");
        pdfContent.append("0000000000 65535 f \n");
        pdfContent.append("0000000009 65535 n \n");
        pdfContent.append("0000000074 65535 n \n");
        pdfContent.append("0000000173 65535 n \n");
        pdfContent.append("0000000301 65535 n \n");

        // Trailer
        pdfContent.append("trailer\n");
        pdfContent.append("<<\n");
        pdfContent.append("/Size 5\n");
        pdfContent.append("/Root 1 0 R\n");
        pdfContent.append(">>\n");
        pdfContent.append("startxref\n");
        pdfContent.append("1234\n");
        pdfContent.append("%%EOF\n");

        return pdfContent.toString().getBytes();
    }

    private String escapeForPDF(String text) {
        if (text == null)
            return "";
        return text.replace("(", "\\(").replace(")", "\\)").replace("\\", "\\\\");
    }

    public byte[] generateCsvReport(WasteCollectionReport report) throws Exception {
        StringBuilder csvContent = new StringBuilder();

        // CSV Header
        csvContent.append("Report Information\n");
        csvContent.append("Title,").append(escapeCSV(report.getReportTitle())).append("\n");
        csvContent.append("Template Type,").append(escapeCSV(report.getTemplateType())).append("\n");
        csvContent.append("Generated Date,")
                .append(report.getGeneratedAt().format(DateTimeFormatter.ofPattern("yyyy-MM-dd HH:mm:ss")))
                .append("\n");
        csvContent.append("Generated By,").append(escapeCSV(report.getGeneratedBy())).append("\n\n");

        // Parameters
        csvContent.append("Parameters\n");
        csvContent.append("Parameter,Value\n");
        if (report.getParameters() != null) {
            report.getParameters().forEach((key, value) -> {
                csvContent.append(escapeCSV(key)).append(",").append(escapeCSV(String.valueOf(value))).append("\n");
            });
        }
        csvContent.append("\n");

        // Report Data
        if (report.getData() != null) {
            @SuppressWarnings("unchecked")
            Map<String, Object> data = (Map<String, Object>) report.getData();

            // Summary metrics
            csvContent.append("Summary Metrics\n");
            csvContent.append("Metric,Value\n");
            if (data.containsKey("totalCollections")) {
                csvContent.append("Total Collections,").append(data.get("totalCollections")).append("\n");
            }
            if (data.containsKey("totalWeight")) {
                csvContent.append("Total Weight (kg),").append(data.get("totalWeight")).append("\n");
            }
            if (data.containsKey("totalPayback")) {
                csvContent.append("Total Payback ($),").append(data.get("totalPayback")).append("\n");
            }
            csvContent.append("\n");

            // Monthly breakdown
            if (data.containsKey("monthlyBreakdown")) {
                csvContent.append("Monthly Breakdown\n");
                csvContent.append("Month,Collections\n");
                @SuppressWarnings("unchecked")
                Map<String, Object> monthly = (Map<String, Object>) data.get("monthlyBreakdown");
                monthly.forEach((month, count) -> {
                    csvContent.append(escapeCSV(month)).append(",").append(count).append("\n");
                });
                csvContent.append("\n");
            }

            // Recent collections
            if (data.containsKey("recentCollections")) {
                csvContent.append("Recent Collections\n");
                csvContent.append("Full Name,Submission Date,Status,Weight (kg),Payback ($),Method,Address\n");
                @SuppressWarnings("unchecked")
                List<Map<String, Object>> collections = (List<Map<String, Object>>) data.get("recentCollections");
                collections.forEach(collection -> {
                    csvContent.append(escapeCSV(String.valueOf(collection.get("fullName")))).append(",")
                            .append(escapeCSV(String.valueOf(collection.get("submissionDate")))).append(",")
                            .append(escapeCSV(String.valueOf(collection.get("status")))).append(",")
                            .append(collection.get("totalWeight")).append(",")
                            .append(collection.get("totalPayback")).append(",")
                            .append(escapeCSV(String.valueOf(collection.get("submissionMethod")))).append(",")
                            .append(escapeCSV(String.valueOf(collection.get("address")))).append("\n");
                });
            }
        }

        return csvContent.toString().getBytes();
    }

    public byte[] generateExcelReport(WasteCollectionReport report) throws IOException {
        try (Workbook workbook = new XSSFWorkbook()) {
            // Create sheets
            Sheet summarySheet = workbook.createSheet("Summary");
            Sheet dataSheet = workbook.createSheet("Data");

            // Create header style
            CellStyle headerStyle = workbook.createCellStyle();
            Font headerFont = workbook.createFont();
            headerFont.setBold(true);
            headerStyle.setFont(headerFont);

            // Summary Sheet
            int rowNum = 0;

            // Report Information
            Row titleRow = summarySheet.createRow(rowNum++);
            Cell titleCell = titleRow.createCell(0);
            titleCell.setCellValue("Report Information");
            titleCell.setCellStyle(headerStyle);

            addExcelRow(summarySheet, rowNum++, "Title", report.getReportTitle());
            addExcelRow(summarySheet, rowNum++, "Template Type", report.getTemplateType());
            addExcelRow(summarySheet, rowNum++, "Generated Date",
                    report.getGeneratedAt().format(DateTimeFormatter.ofPattern("yyyy-MM-dd HH:mm:ss")));
            addExcelRow(summarySheet, rowNum++, "Generated By", report.getGeneratedBy());

            rowNum++; // Empty row

            // Parameters
            Row paramRow = summarySheet.createRow(rowNum++);
            Cell paramCell = paramRow.createCell(0);
            paramCell.setCellValue("Parameters");
            paramCell.setCellStyle(headerStyle);

            if (report.getParameters() != null) {
                final int[] currentRow = { rowNum }; // Use array to make it effectively final
                report.getParameters().forEach((key, value) -> {
                    addExcelRow(summarySheet, currentRow[0]++, key, String.valueOf(value));
                });
                rowNum = currentRow[0]; // Update rowNum after the loop
            }

            // Data Sheet
            if (report.getData() != null) {
                @SuppressWarnings("unchecked")
                Map<String, Object> data = (Map<String, Object>) report.getData();

                int dataRowNum = 0;

                // Summary metrics
                Row metricsHeaderRow = dataSheet.createRow(dataRowNum++);
                Cell metricsHeaderCell = metricsHeaderRow.createCell(0);
                metricsHeaderCell.setCellValue("Summary Metrics");
                metricsHeaderCell.setCellStyle(headerStyle);

                if (data.containsKey("totalCollections")) {
                    addExcelRow(dataSheet, dataRowNum++, "Total Collections",
                            String.valueOf(data.get("totalCollections")));
                }
                if (data.containsKey("totalWeight")) {
                    addExcelRow(dataSheet, dataRowNum++, "Total Weight (kg)", String.valueOf(data.get("totalWeight")));
                }
                if (data.containsKey("totalPayback")) {
                    addExcelRow(dataSheet, dataRowNum++, "Total Payback ($)", String.valueOf(data.get("totalPayback")));
                }

                dataRowNum++; // Empty row

                // Monthly breakdown
                if (data.containsKey("monthlyBreakdown")) {
                    Row monthlyHeaderRow = dataSheet.createRow(dataRowNum++);
                    Cell monthlyHeaderCell = monthlyHeaderRow.createCell(0);
                    monthlyHeaderCell.setCellValue("Monthly Breakdown");
                    monthlyHeaderCell.setCellStyle(headerStyle);

                    Row monthlyTitleRow = dataSheet.createRow(dataRowNum++);
                    monthlyTitleRow.createCell(0).setCellValue("Month");
                    monthlyTitleRow.createCell(1).setCellValue("Collections");

                    @SuppressWarnings("unchecked")
                    Map<String, Object> monthly = (Map<String, Object>) data.get("monthlyBreakdown");
                    for (Map.Entry<String, Object> entry : monthly.entrySet()) {
                        Row monthRow = dataSheet.createRow(dataRowNum++);
                        monthRow.createCell(0).setCellValue(entry.getKey());
                        monthRow.createCell(1).setCellValue(Double.parseDouble(entry.getValue().toString()));
                    }
                }
            }

            // Auto-size columns
            summarySheet.autoSizeColumn(0);
            summarySheet.autoSizeColumn(1);
            dataSheet.autoSizeColumn(0);
            dataSheet.autoSizeColumn(1);

            // Write to byte array
            ByteArrayOutputStream outputStream = new ByteArrayOutputStream();
            workbook.write(outputStream);
            return outputStream.toByteArray();
        }
    }

    private void addExcelRow(Sheet sheet, int rowNum, String key, String value) {
        Row row = sheet.createRow(rowNum);
        row.createCell(0).setCellValue(key);
        row.createCell(1).setCellValue(value);
    }

    private String escapeCSV(String value) {
        if (value == null)
            return "";
        if (value.contains(",") || value.contains("\"") || value.contains("\n")) {
            return "\"" + value.replace("\"", "\"\"") + "\"";
        }
        return value;
    }

    public String getFileExtension(String format) {
        switch (format.toUpperCase()) {
            case "PDF":
                return ".pdf";
            case "CSV":
                return ".csv";
            case "EXCEL":
                return ".xlsx";
            default:
                return ".txt";
        }
    }

    public String getContentType(String format) {
        switch (format.toUpperCase()) {
            case "PDF":
                return "application/pdf";
            case "CSV":
                return "text/csv";
            case "EXCEL":
                return "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet";
            default:
                return "text/plain";
        }
    }
}