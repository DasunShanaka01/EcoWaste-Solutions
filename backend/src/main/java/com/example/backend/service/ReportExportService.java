package com.example.backend.service;

import com.example.backend.Admin.WasteCollectionReport;
import com.fasterxml.jackson.databind.ObjectMapper;
import org.apache.poi.ss.usermodel.*;
import org.apache.poi.xssf.usermodel.XSSFWorkbook;
import org.springframework.stereotype.Service;

import java.io.ByteArrayOutputStream;
import java.io.IOException;
import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;
import java.util.List;
import java.util.Map;

@Service
public class ReportExportService {

    private final ObjectMapper objectMapper = new ObjectMapper();

    public byte[] generatePdfReport(WasteCollectionReport report) throws Exception {
        // For now, we'll create a simple text-based PDF
        // In a real application, you might want to use libraries like iText or Flying
        // Saucer
        StringBuilder pdfContent = new StringBuilder();

        pdfContent.append("WASTE COLLECTION REPORT\n");
        pdfContent.append("======================\n\n");
        pdfContent.append("Report Title: ").append(report.getReportTitle()).append("\n");
        pdfContent.append("Template Type: ").append(report.getTemplateType()).append("\n");
        pdfContent.append("Generated Date: ")
                .append(report.getGeneratedAt().format(DateTimeFormatter.ofPattern("yyyy-MM-dd HH:mm:ss")))
                .append("\n");
        pdfContent.append("Generated By: ").append(report.getGeneratedBy()).append("\n\n");

        // Add parameters
        pdfContent.append("PARAMETERS:\n");
        pdfContent.append("-----------\n");
        if (report.getParameters() != null) {
            report.getParameters().forEach((key, value) -> {
                pdfContent.append(key).append(": ").append(value).append("\n");
            });
        }
        pdfContent.append("\n");

        // Add report data
        pdfContent.append("REPORT DATA:\n");
        pdfContent.append("------------\n");
        if (report.getData() != null) {
            @SuppressWarnings("unchecked")
            Map<String, Object> data = (Map<String, Object>) report.getData();

            if (data.containsKey("totalCollections")) {
                pdfContent.append("Total Collections: ").append(data.get("totalCollections")).append("\n");
            }
            if (data.containsKey("totalWeight")) {
                pdfContent.append("Total Weight (kg): ").append(data.get("totalWeight")).append("\n");
            }
            if (data.containsKey("totalPayback")) {
                pdfContent.append("Total Payback ($): ").append(data.get("totalPayback")).append("\n");
            }

            // Add monthly breakdown if available
            if (data.containsKey("monthlyBreakdown")) {
                pdfContent.append("\nMONTHLY BREAKDOWN:\n");
                @SuppressWarnings("unchecked")
                Map<String, Object> monthly = (Map<String, Object>) data.get("monthlyBreakdown");
                monthly.forEach((month, count) -> {
                    pdfContent.append(month).append(": ").append(count).append(" collections\n");
                });
            }

            // Add status breakdown if available
            if (data.containsKey("statusBreakdown")) {
                pdfContent.append("\nSTATUS BREAKDOWN:\n");
                @SuppressWarnings("unchecked")
                Map<String, Object> status = (Map<String, Object>) data.get("statusBreakdown");
                status.forEach((statusName, count) -> {
                    pdfContent.append(statusName).append(": ").append(count).append("\n");
                });
            }
        }

        return pdfContent.toString().getBytes();
    }

    public byte[] generateCsvReport(WasteCollectionReport report) throws Exception {
        StringBuilder csvContent = new StringBuilder();

        // CSV Header
        csvContent.append("Report Information\n");
        csvContent.append("Title,").append(escapeCSV(report.getReportTitle())).append("\n");
        csvContent.append("Template Type,").append(escapeCSV(report.getTemplateType())).append("\n");
        csvContent.append("Generated Date,")
                .append(report.getGeneratedAt().format(DateTimeFormatter.ofPattern("yyyy-MM-dd HH:mm:ss")))
                .append("\n");
        csvContent.append("Generated By,").append(escapeCSV(report.getGeneratedBy())).append("\n\n");

        // Parameters
        csvContent.append("Parameters\n");
        csvContent.append("Parameter,Value\n");
        if (report.getParameters() != null) {
            report.getParameters().forEach((key, value) -> {
                csvContent.append(escapeCSV(key)).append(",").append(escapeCSV(String.valueOf(value))).append("\n");
            });
        }
        csvContent.append("\n");

        // Report Data
        if (report.getData() != null) {
            @SuppressWarnings("unchecked")
            Map<String, Object> data = (Map<String, Object>) report.getData();

            // Summary metrics
            csvContent.append("Summary Metrics\n");
            csvContent.append("Metric,Value\n");
            if (data.containsKey("totalCollections")) {
                csvContent.append("Total Collections,").append(data.get("totalCollections")).append("\n");
            }
            if (data.containsKey("totalWeight")) {
                csvContent.append("Total Weight (kg),").append(data.get("totalWeight")).append("\n");
            }
            if (data.containsKey("totalPayback")) {
                csvContent.append("Total Payback ($),").append(data.get("totalPayback")).append("\n");
            }
            csvContent.append("\n");

            // Monthly breakdown
            if (data.containsKey("monthlyBreakdown")) {
                csvContent.append("Monthly Breakdown\n");
                csvContent.append("Month,Collections\n");
                @SuppressWarnings("unchecked")
                Map<String, Object> monthly = (Map<String, Object>) data.get("monthlyBreakdown");
                monthly.forEach((month, count) -> {
                    csvContent.append(escapeCSV(month)).append(",").append(count).append("\n");
                });
                csvContent.append("\n");
            }

            // Recent collections
            if (data.containsKey("recentCollections")) {
                csvContent.append("Recent Collections\n");
                csvContent.append("Full Name,Submission Date,Status,Weight (kg),Payback ($),Method,Address\n");
                @SuppressWarnings("unchecked")
                List<Map<String, Object>> collections = (List<Map<String, Object>>) data.get("recentCollections");
                collections.forEach(collection -> {
                    csvContent.append(escapeCSV(String.valueOf(collection.get("fullName")))).append(",")
                            .append(escapeCSV(String.valueOf(collection.get("submissionDate")))).append(",")
                            .append(escapeCSV(String.valueOf(collection.get("status")))).append(",")
                            .append(collection.get("totalWeight")).append(",")
                            .append(collection.get("totalPayback")).append(",")
                            .append(escapeCSV(String.valueOf(collection.get("submissionMethod")))).append(",")
                            .append(escapeCSV(String.valueOf(collection.get("address")))).append("\n");
                });
            }
        }

        return csvContent.toString().getBytes();
    }

    public byte[] generateExcelReport(WasteCollectionReport report) throws IOException {
        try (Workbook workbook = new XSSFWorkbook()) {
            // Create sheets
            Sheet summarySheet = workbook.createSheet("Summary");
            Sheet dataSheet = workbook.createSheet("Data");

            // Create header style
            CellStyle headerStyle = workbook.createCellStyle();
            Font headerFont = workbook.createFont();
            headerFont.setBold(true);
            headerStyle.setFont(headerFont);

            // Summary Sheet
            int rowNum = 0;

            // Report Information
            Row titleRow = summarySheet.createRow(rowNum++);
            Cell titleCell = titleRow.createCell(0);
            titleCell.setCellValue("Report Information");
            titleCell.setCellStyle(headerStyle);

            addExcelRow(summarySheet, rowNum++, "Title", report.getReportTitle());
            addExcelRow(summarySheet, rowNum++, "Template Type", report.getTemplateType());
            addExcelRow(summarySheet, rowNum++, "Generated Date",
                    report.getGeneratedAt().format(DateTimeFormatter.ofPattern("yyyy-MM-dd HH:mm:ss")));
            addExcelRow(summarySheet, rowNum++, "Generated By", report.getGeneratedBy());

            rowNum++; // Empty row

            // Parameters
            Row paramRow = summarySheet.createRow(rowNum++);
            Cell paramCell = paramRow.createCell(0);
            paramCell.setCellValue("Parameters");
            paramCell.setCellStyle(headerStyle);

            if (report.getParameters() != null) {
                final int[] currentRow = { rowNum }; // Use array to make it effectively final
                report.getParameters().forEach((key, value) -> {
                    addExcelRow(summarySheet, currentRow[0]++, key, String.valueOf(value));
                });
                rowNum = currentRow[0]; // Update rowNum after the loop
            }

            // Data Sheet
            if (report.getData() != null) {
                @SuppressWarnings("unchecked")
                Map<String, Object> data = (Map<String, Object>) report.getData();

                int dataRowNum = 0;

                // Summary metrics
                Row metricsHeaderRow = dataSheet.createRow(dataRowNum++);
                Cell metricsHeaderCell = metricsHeaderRow.createCell(0);
                metricsHeaderCell.setCellValue("Summary Metrics");
                metricsHeaderCell.setCellStyle(headerStyle);

                if (data.containsKey("totalCollections")) {
                    addExcelRow(dataSheet, dataRowNum++, "Total Collections",
                            String.valueOf(data.get("totalCollections")));
                }
                if (data.containsKey("totalWeight")) {
                    addExcelRow(dataSheet, dataRowNum++, "Total Weight (kg)", String.valueOf(data.get("totalWeight")));
                }
                if (data.containsKey("totalPayback")) {
                    addExcelRow(dataSheet, dataRowNum++, "Total Payback ($)", String.valueOf(data.get("totalPayback")));
                }

                dataRowNum++; // Empty row

                // Monthly breakdown
                if (data.containsKey("monthlyBreakdown")) {
                    Row monthlyHeaderRow = dataSheet.createRow(dataRowNum++);
                    Cell monthlyHeaderCell = monthlyHeaderRow.createCell(0);
                    monthlyHeaderCell.setCellValue("Monthly Breakdown");
                    monthlyHeaderCell.setCellStyle(headerStyle);

                    Row monthlyTitleRow = dataSheet.createRow(dataRowNum++);
                    monthlyTitleRow.createCell(0).setCellValue("Month");
                    monthlyTitleRow.createCell(1).setCellValue("Collections");

                    @SuppressWarnings("unchecked")
                    Map<String, Object> monthly = (Map<String, Object>) data.get("monthlyBreakdown");
                    for (Map.Entry<String, Object> entry : monthly.entrySet()) {
                        Row monthRow = dataSheet.createRow(dataRowNum++);
                        monthRow.createCell(0).setCellValue(entry.getKey());
                        monthRow.createCell(1).setCellValue(Double.parseDouble(entry.getValue().toString()));
                    }
                }
            }

            // Auto-size columns
            summarySheet.autoSizeColumn(0);
            summarySheet.autoSizeColumn(1);
            dataSheet.autoSizeColumn(0);
            dataSheet.autoSizeColumn(1);

            // Write to byte array
            ByteArrayOutputStream outputStream = new ByteArrayOutputStream();
            workbook.write(outputStream);
            return outputStream.toByteArray();
        }
    }

    private void addExcelRow(Sheet sheet, int rowNum, String key, String value) {
        Row row = sheet.createRow(rowNum);
        row.createCell(0).setCellValue(key);
        row.createCell(1).setCellValue(value);
    }

    private String escapeCSV(String value) {
        if (value == null)
            return "";
        if (value.contains(",") || value.contains("\"") || value.contains("\n")) {
            return "\"" + value.replace("\"", "\"\"") + "\"";
        }
        return value;
    }

    public String getFileExtension(String format) {
        switch (format.toUpperCase()) {
            case "PDF":
                return ".pdf";
            case "CSV":
                return ".csv";
            case "EXCEL":
                return ".xlsx";
            default:
                return ".txt";
        }
    }

    public String getContentType(String format) {
        switch (format.toUpperCase()) {
            case "PDF":
                return "application/pdf";
            case "CSV":
                return "text/csv";
            case "EXCEL":
                return "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet";
            default:
                return "text/plain";
        }
    }
}